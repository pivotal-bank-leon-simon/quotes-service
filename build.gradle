buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
        springCloudServicesVersion = '2.0.2.RELEASE'
        springCloudVersion = 'Finchley.SR2'
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7"
    }
}

plugins {
    id 'net.ltgt.apt' version '0.15'
}

repositories {
    mavenLocal()
    mavenCentral()
}


// Apply versioning to all projects from versioning script.
apply plugin: 'java'
apply plugin: 'jacoco'
apply from: "$projectDir/gradle/versioning.gradle"
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"
apply plugin: "com.gorylenko.gradle-git-properties"

println version

test { finalizedBy jacocoTestReport }

task manifestFilter(type: Copy) {
    from 'manifest-unversioned.yml'
    into "${buildDir}/"
    rename { String fileName ->
        fileName.replace('-unversioned', '')
    }
    expand(version: "${version}")
}

assemble { finalizedBy manifestFilter }

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
        xml.enabled false
    }

    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}


jacoco {
    toolVersion = "0.7.5+" //	reportsDir = file("$buildDir/customJacocoReportDir")
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
}

dependencyManagement {
    imports {
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${springCloudServicesVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
dependencies {

    // shared dependencies for all services
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.cloud:spring-cloud-starter-sleuth")
    implementation("io.pivotal.spring.cloud:spring-cloud-services-starter-config-client")
    implementation("io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry")
    implementation("io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker")
    compileOnly("org.projectlombok:lombok:1.16.20")
    runtimeOnly("org.springframework.boot:spring-boot-devtools")
    //test packages

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("com.jayway.jsonpath:json-path")
    annotationProcessor("org.projectlombok:lombok:1.16.20")
}
// process substitutions in yml files.
processResources {
    filesMatching("**/*.yml") { expand(project.properties) }
}


jar { baseName = 'quotes' }
description = "Micro-service to retrieve up to date quotes"

task wrapper(type: Wrapper) { gradleVersion = '5.1' }
